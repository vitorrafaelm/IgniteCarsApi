## Utilizando banco de dados dentro da nossa aplicação
  1. Uma forma de utilizar é usando o driver nativo do banco de dados;
  - Pesquisar sobre o driver nativo do node-postgres;
  - Cada driver pode se comportar de uma forma diferente;
  2. Utilizar os Query builders
  - Misturam o sql puro com o javascript puro, o Knex é um bom exemplo de
  query builder;
  3. Ulitizar um ORM - Typeorm
  - Object relational mapping.
  - MODEL <-> ORM <-> BANCO DE DADOS;
  - O orm pega o nosso código e transforma para algo que o banco de dados
  entenda;
  - O sequilize é um ORM bem conhecido e muito usado também;

## Adicionando banco de dados ao docker-compose
  - É recomendado colocar o banco de dados primeiro no arquivo docker-compose
  - network_mode: host -> Faz os services se enxergaram e com isso não precisa
  colocar o nome do container no host do ormconfig.json

## Conceito de migrations
  - Migrations é como se fosse um versionamento de tudo que estámos fazendo no nosso
  banco de dados;
  - O nome da migrations é composto por um timestamp + nome da tabela;
  - Ajuda a equipe a trabalhar com a mesma versão do banco de dados;

## Injeção de dependências
  - É o que é feito nos arquivos Index dos useCases, onde uma classe depende da outra
  para funcionar;
- TSyring é uma lib para ajudar a fazer injeção de dependência;

## Jwt é o que garante que o usuário está autenticado e que esse usuário tem algumas
permissões. O token é composto por header, payload (Não deve ser passado dados sensíveis) e
e verify signature.

## No insominia tem a autenticação por Bearer token, que é a utilizada pelo jtw,  quando enviamos
o token, eleterá o seguinte formato: Bearer jdlkjalkdalkalçkdçalkçdkaçdça,dçl. Essas informações vem
dentro do header da aplicação;

const authHeader = request.headers.authorization; - É por onde o token é recebido;
## Verificar se o token é enviado;

## A Aula de tratamento de exceções precisa ser revista e praticada;

## Upload de avatar:
  - É salvo apenas a referência de onde a foto vai estar;
  - Podemos salvar o arquivo em um storage como o amazon s3;
  - Recuperador a imagem baseado em uma URL.
  - Quando estamos trabalhando com typescript pode ser que tenhamos que sobre escrever algumas
  tipagens;

## Não é responsabilidade das nossas rotas fazer o upload; Logo devemos criar isso em outro lugar;
  - Colocar a responsabilidade de fazer o upload dentro da pasta config;


## Conhecendos tipos de testes
  - Há testes unitários e testes de integração
  - As regras de negócio devem se concentrar nos useCases;
  - Testes unitários é testes das regras de negócio e é feito em um useCase;
  - Testes de integração é quando queremos testar a aplicação inteira; Os testes de integração
  testariam desde o momento onde a rota é chamada, até a chamada co controller e o retorno que
  a requisição vai ter. Testamos o fluxo complexo da aplicação;
  - Criamos um banco de testes para fazer todos os testes de integração;

  - TDD - Não é uma forma de teste, é uma metodologia utilizada para fazer testes; Test Driven
  Development (Desenvolvimento dirigido por testes);
  - Começar pelo teste, e colocar a lógica dentro do teste e tudo que é preciso para a funciona-
  lidade funcionar;
  - A aplicação deve conter testes e os testes devem estar bem escritos;
  - Os testes devem mostrar as regras de negócios;
  - Utilizamos testes para manter as coisas da forma correta;
  - Testes são importantes para a nossa aplicação;
  - Os testes devem ficar dentro das pastas do useCase

## Jest para realizar testes
  - yarn add jest @types/jest
  - yarn jest --init
  - yarn add ts-jest -D
  - Precisamos mostrar no teste o resultado que esperamos para uma determinada função;
  - O describe() -> Serve para agrupar os nossos testes, dentro do describe é onde de fato
  ficam os testes. Os testes ficam dentro do it()


